Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "logs:*"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:DescribeStackResource"
                Resource: "*"
  MyCustomFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          from urllib import request

          def lambda_handler(event, context):
              print("Received event: " + json.dumps(event))
              response_url = event['ResponseURL']

              response_body = {
                  'Status': 'SUCCESS',
                  'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,
                  'PhysicalResourceId': context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': {
                      'ExampleKey': 'ExampleValue'
                  }
              }

              json_response_body = json.dumps(response_body)
              
              headers = {
                  'content-type': '',
                  'content-length': str(len(json_response_body))
              }
              
              request_data = request.Request(url=response_url, data=bytes(json_response_body.encode('utf-8')), headers=headers, method='PUT')
              with request.urlopen(request_data) as response:
                  print(f"Status code: {response.getcode()}")

              return response_body
                Handler: "index.lambda_handler"
                Role: !GetAtt LambdaExecutionRole.Arn
                Runtime: "python3.8"
  
  MyCustomResource:
    Type: "Custom::MyCustomResource"
    Properties:
      ServiceToken: !GetAtt MyCustomFunction.Arn